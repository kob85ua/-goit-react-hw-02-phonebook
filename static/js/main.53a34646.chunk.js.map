{"version":3,"sources":["components/Styles.js","components/ContactList.jsx","components/InputBlock.jsx","components/SearchForm.jsx","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","InputBlockWrapper","form","Label","label","Input","input","Button","button","List","li","ListItem","contactList","phoneContacts","onDeleteContact","map","phoneContact","key","id","name","number","onClick","InputBlock","state","handleChange","target","console","log","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","type","onChange","Component","SearchForm","onFindContacts","App","contacts","filter","changeFilter","findContacts","contact","toLocaleLowerCase","includes","addContact","contactName","contactNumber","existContact","find","alert","undefined","uuidv4","prevState","deleteContact","contactId","visibleContacts","ContactList","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53a34646.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst AppWrapper = styled.div`\n  font-family: \"Arial\";\n  font-size: 16px;\n  width: 400px;\n  margin: auto;\n  padding-inline-start: 0;\n  border: 2px grey solid;\n  border-radius: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`;\nconst InputBlockWrapper = styled.form`\n  width: 250px;\n  display: flex;\n  height: 120px;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: stretch;\n`;\nconst Label = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nconst Input = styled.input`\n  border: 2px grey solid;\n  height: 30px;\n  border-radius: 20px;\n`;\nconst Button = styled.button`\n  width: 90px;\n  align-self: center;\n  height: 30px;\n  border: 2px grey solid;\n  border-radius: 15px;\n`;\nconst List = styled.li`\n  list-style-type: none;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\nconst ListItem = styled.li`\n  width: 90%;\n  display: flex;\n  flex-direction: space-between;\n  justify-content: center;\n  height: 50px;\n  font-size: 14px;\n  line-height: 50px;\n`;\nexport { AppWrapper, InputBlockWrapper, Label, Input, Button, List, ListItem };\n","import React from \"react\";\nimport { Button, List, ListItem } from \"./Styles\";\nconst contactList = ({ phoneContacts, onDeleteContact }) => (\n  <List>\n    {phoneContacts.map((phoneContact) => (\n      <ListItem key={phoneContact.id}>\n        {phoneContact.name}: {phoneContact.number}\n        <Button onClick={() => onDeleteContact(phoneContact.id)}>Delete</Button>\n      </ListItem>\n    ))}\n  </List>\n);\n\nexport default contactList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { InputBlockWrapper, Label, Input, Button } from \"./Styles\";\nclass InputBlock extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  };\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  handleChange = ({ target }) => {\n    console.log(target.value);\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onAddContact(this.state.name, this.state.number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <InputBlockWrapper onSubmit={this.handleSubmit}>\n          <Label>\n            <span>Name</span>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n            />\n          </Label>\n          <Label>\n            <span>Number</span>\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n            />\n          </Label>\n          <Button type=\"submit\">Add contact</Button>\n        </InputBlockWrapper>\n      </div>\n    );\n  }\n}\n\nexport default InputBlock;\n","import React from \"react\";\nimport { Input } from \"./Styles\";\nconst SearchForm = ({ value, onFindContacts }) => {\n  return (\n    <div>\n      <label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={(e) => onFindContacts(e.target.value)}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport ContactList from \"./components/ContactList\";\nimport InputBlock from \"./components/InputBlock\";\nimport SearchForm from \"./components/SearchForm\";\nimport { AppWrapper } from \"./components/Styles\";\nclass App extends Component {\n  static defaultProps = {};\n\n  static propTypes = {};\n\n  state = {\n    contacts: [\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: \"\",\n  };\n\n  changeFilter = (filter) => {\n    console.log(filter);\n    this.setState({ filter });\n  };\n\n  findContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n\n  addContact = (contactName, contactNumber) => {\n    const existContact = this.state.contacts.find(\n      ({ name }) => name === contactName\n    );\n    if (contactName === \"\" || contactNumber === \"\") {\n      alert(`Fill in all fields`);\n    } else if (existContact !== undefined) {\n      alert(`${existContact.name} is already in contacts`);\n    } else {\n      const contact = {\n        name: contactName,\n        number: contactNumber,\n        id: uuidv4(),\n      };\n      this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    }\n  };\n  deleteContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.findContacts();\n\n    return (\n      <AppWrapper>\n        <h2>Phonebook</h2>\n        <InputBlock onAddContact={this.addContact}></InputBlock>\n        <h2>Contacts</h2>\n        <SearchForm\n          value={filter}\n          onFindContacts={this.changeFilter}\n        ></SearchForm>\n        <ContactList\n          phoneContacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        ></ContactList>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}